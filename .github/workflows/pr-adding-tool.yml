name: Create PR for New Tool Addition/Modification

on:
  issues:
    types: [opened]

jobs:
  create-pr:
    runs-on: ubuntu-latest
    if: github.event.issue.title == 'Add or Modify [Tool Name] in JSON Schema Ecosystem'

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Parse issue content using GitHub API
      - name: Get issue details
        id: issue_details
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"

          # Debugging: Print entire ISSUE_BODY
          echo "$ISSUE_BODY"

          TOOL_NAME=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Tool Name\n)[^\n]*' || echo "Tool Name not found")
          DESCRIPTION=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Tool Description\n)[^\n]*' || echo "Tool Description not found")
          ACTION_TYPE=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Action Type\n)[^\n]*' || echo "Action Type not found")
          TOOLING_TYPES=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Tooling Types\n)[^\n]*' || echo "Tooling Types not found")
          LANGUAGES=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Languages\n)[^\n]*' || echo "Languages not found")
          ENVIRONMENTS=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Environments\n)[^\n]*' || echo "Environments not found")
          DEPENDS_ON_VALIDATORS=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Dependencies on Validators\n)[^\n]*' || echo "Dependencies on Validators not found")
          CREATORS=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Creators\n)[^\n]*' || echo "Creators not found")
          MAINTAINERS=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Maintainers\n)[^\n]*' || echo "Maintainers not found")
          LICENSE=$(echo "$ISSUE_BODY" | grep -oP '(?<=### License\n)[^\n]*' || echo "License not found")
          SOURCE=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Source Repository URL\n)[^\n]*' || echo "Source URL not found")
          HOMEPAGE=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Homepage URL\n)[^\n]*' || echo "Homepage URL not found")
          SUPPORTED_DIALECTS=$(echo "$ISSUE_BODY" | grep -oP '(?<=### Supported Dialects\n)[^\n]*' || echo "Supported Dialects not found")

          echo "TOOL_NAME=$TOOL_NAME"
          echo "DESCRIPTION=$DESCRIPTION"
          echo "TOOLING_TYPES=$TOOLING_TYPES"

          echo "tool_name=$TOOL_NAME" >> $GITHUB_ENV
          echo "description=$DESCRIPTION" >> $GITHUB_ENV
          echo "tooling_types=$TOOLING_TYPES" >> $GITHUB_ENV
          echo "languages=$LANGUAGES" >> $GITHUB_ENV
          echo "environments=$ENVIRONMENTS" >> $GITHUB_ENV
          echo "depends_on_validators=$DEPENDS_ON_VALIDATORS" >> $GITHUB_ENV
          echo "creators=$CREATORS" >> $GITHUB_ENV
          echo "maintainers=$MAINTAINERS" >> $GITHUB_ENV
          echo "license=$LICENSE" >> $GITHUB_ENV
          echo "source=$SOURCE" >> $GITHUB_ENV
          echo "homepage=$HOMEPAGE" >> $GITHUB_ENV
          echo "supported_dialects=$SUPPORTED_DIALECTS" >> $GITHUB_ENV

      # Step 3: Create a new branch for the PR
      - name: Create a new branch for the PR
        run: |
          BRANCH_NAME="add-tool-${{ github.event.issue.number }}"
          git checkout -b $BRANCH_NAME

      # Step 4: Modify tooling-data.yaml
      - name: Update tooling-data.yaml
        run: |
          TOOL_NAME="${{ steps.issue_details.outputs.tool_name }}"
          DESCRIPTION="${{ steps.issue_details.outputs.description }}"
          TOOLING_TYPES="${{ steps.issue_details.outputs.tooling_types }}"
          LANGUAGES="${{ steps.issue_details.outputs.languages }}"
          ENVIRONMENTS="${{ steps.issue_details.outputs.environments }}"
          DEPENDS_ON_VALIDATORS="${{ steps.issue_details.outputs.depends_on_validators }}"
          CREATORS="${{ steps.issue_details.outputs.creators }}"
          MAINTAINERS="${{ steps.issue_details.outputs.maintainers }}"
          LICENSE="${{ steps.issue_details.outputs.license }}"
          SOURCE="${{ steps.issue_details.outputs.source }}"
          HOMEPAGE="${{ steps.issue_details.outputs.homepage }}"
          SUPPORTED_DIALECTS="${{ steps.issue_details.outputs.supported_dialects }}"

          printf "\n- name: \"%s\"\n  description: \"%s\"\n  toolingTypes:\n    $(echo "$TOOLING_TYPES" | sed 's/,/\n    - /g')\n  languages:\n    $(echo "$LANGUAGES" | sed 's/,/\n    - /g')\n  maintainers:\n    $(echo "$MAINTAINERS" | sed 's/,/\n    - name: /g')\n  license: \"%s\"\n  source: \"%s\"\n  homepage: \"%s\"\n  supportedDialects:\n    draft:\n      $(echo "$SUPPORTED_DIALECTS" | sed 's/,/\n      /g')\n  lastUpdated: \"$(date +'%Y-%m-%d')\"\n" >> data/tooling-data.yaml

      # Step 5: Commit the changes
      - name: Commit changes to tooling-data.yaml
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add data/tooling-data.yaml
          git commit -m "Add new tool: $TOOL_NAME"

      # Step 6: Push the changes and create PR
      - name: Push changes and create PR
        run: |
          git push --set-upstream origin $BRANCH_NAME
          gh pr create --title "Add new tool: $TOOL_NAME" --body "This PR adds a new tool to the JSON Schema ecosystem." --base main --head $BRANCH_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
